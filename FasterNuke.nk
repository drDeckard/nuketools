set cut_paste_input [stack 0]
version 14.0 v5
push $cut_paste_input
NoOp {
name FasterNuke
tile_color 0xff00ff
label "\n."
selected true
xpos -270
ypos 565
addUserKnob {20 User}
addUserKnob {22 trackerpreview l "Kill All Tracker Nodes Preview" T "for node in nuke.allNodes():\n    if node.Class() == \"Tracker4\":\n        node.knob('zoom_window_filter_behaviour').setValue(2)\n        node.knob('zoom_window_behaviour').setValue(4)\n        node.knob('keyframe_display').setValue(3)" +STARTLINE}
addUserKnob {22 trsall l "Enable TRS Trackers" T "def bm_EnableTrackerTRS():\n\t#ENABLE TRANSLATE, ROTATE AND SCALE IN SELECTED TRACKER\n\tt = \[8, 39, 70, 101, 132, 163, 194, 225, 256, 287, 318, 7, 38, 69, 100, 131, 162, 193, 224, 255, 286, 317, 6, 37, 68, 99, 130, 161, 192, 223, 254, 285, 316, 349, 380, 411, 442, 473, 504, 535, 566, 597, 628, 659, 348, 379, 410, 441, 472, 503, 534, 565, 596, 627, 658, 347, 378, 409, 440, 471, 502, 533, 564, 595, 626, 657]\n\ttry:\n\t\tnuke.selectedNode()\n\texcept:\n\t\tnuke.message(\"Select a Tracker to enable Translate, Rotate & Scale\")\n\n\tif nuke.selectedNode().Class() == 'Tracker4':\n\t\tfor n in t:\n\t\t\tnuke.selectedNode()\['tracks'].setValue(True, n)\n\telse:\n\t\tnuke.message(\"Select a Tracker to enable Translate, Rotate & Scale\")\n\nbm_EnableTrackerTRS()" +STARTLINE}
addUserKnob {22 localizeselected l "Localize On for Selected Reads Only" T "selectedNodes = nuke.selectedNodes()\n\nfor node in nuke.allNodes():\n    if node.Class() == \"Read\":\n        node.knob('localizationPolicy').setValue(3)\n            \nfor node in selectedNodes:\n    if node.Class() == \"Read\":\n        node.knob('localizationPolicy').setValue(0)  " +STARTLINE}
addUserKnob {22 disablePostage l "Disable all Postage Stamps On Reads" T "for i in nuke.allNodes('Read'):\n    i\['postage_stamp'].setValue(False)" +STARTLINE}
addUserKnob {22 killviewers l "Kill All Viewers" T "for node in nuke.allNodes('Viewer'):\n    nuke.delete(node)" +STARTLINE}
addUserKnob {22 bencropprecise l "AutoCrop All Merges Full Framerange" T "auto_bbox(\"precise\", 10)" +STARTLINE}
addUserKnob {22 benautocropfast l "AutoCrop All Merges Current Frame" T "auto_bbox(\"fast\", 10)" +STARTLINE}
addUserKnob {52 bencropcode l cropcode T "# From the tutorial: \"Ben, how do I manage my bbox size?\"\n# https://youtu.be/vIvOmGkAMP8\n\n# USAGE\n# 1. Add this .py file to your ~/.nuke directory.\n# 2. In your ~/.nuke/menu.py, add the following line: import example_auto_bbox\n# 3. Start Nuke!\n\n\n\n# --------------------------------------------------------------\n#  example_auto_bbox\n#  Version: 0.1.2\n#  Last Updated: February 21st, 2022\n# --------------------------------------------------------------\n\n# --------------------------------------------------------------\n# TO DO\n# - Add AutoCrop nodes above right-angle dots.\n# --------------------------------------------------------------\n\nimport nuke\nimport nukescripts\n\ndef auto_bbox(speed, overscan_percentage):\n    \"\"\"\n    Scrapes a Nuke script, and automatically crops Merge nodes' A-pipes when the incoming bbox is larger than the project's format + overscan.\n    \"\"\"\n\n    # Ask the user for overscan, or quit if they choose \"cancel\"\n    try:\n        overscan = float(nuke.getInput(\"How much overscan (%) should I account for?\", str(overscan_percentage)))\n    except:\n        return\n\n    # 10% overscan will == 5% on either side...\n    overscan = overscan/2\n\n    first_frame = nuke.root().knob('first_frame').value()\n    last_frame = nuke.root().knob('last_frame').value()\n    middle_frame = first_frame+((last_frame-first_frame)/2)\n    frame_count = 0\n\n    # Start by deselecting any selected nodes.\n    if nuke.selectedNodes() != \[]:\n        for selected_nodes in nuke.selectedNodes():\n            selected_nodes.setSelected(False)\n\n    # Find the project's format + overscan\n    format_x = nuke.root().width()*overscan/100*-1\n    format_y = nuke.root().height()*overscan/100*-1\n    format_w = nuke.root().width()+(nuke.root().width()*overscan/100)\n    format_h = nuke.root().height()+(nuke.root().height()*overscan/100)\n\n\n\n    # Print a string to kick out a user-friendly log of what's happening...\n    print(\"\\n\\n\\n###########   AUTO BBOX RESULTS   ###########\")\n\n\n\n    # Look at all Merge nodes...\n    for i in nuke.allNodes('Merge2'):\n\n        # If the merge node has a 'mask' or 'stencil' operation, set the bbox appropriately.\n        if i.knob('operation').value() == \"mask\" and i.knob('bbox').value() != \"A\":\n            i.knob('bbox').setValue(\"A\")\n            print(i.name()+\" is set to mask, and is pulling in too much data from the B pipe. Using bbox from A...\")\n\n        elif i.knob('operation').value() == \"stencil\" and i.knob('bbox').value() != \"B\":\n            i.knob('bbox').setValue(\"B\")\n            print(i.name()+\" is set to stencil, and is pulling in too much data from the A pipe. Using bbox from B...\")\n\n\n\n        # Calculate the bbox of the node connected to Merge nodes' A pipes.\n        x = i.input(1).bbox().x()\n        y = i.input(1).bbox().y()\n        w = i.input(1).bbox().w()+x\n        h = i.input(1).bbox().h()+y\n\n\n\n        # If the bbox exceeds the format + overscan...\n        if x < format_x or y < format_y or w > format_w or h > format_h:\n\n            # ...and if there is already a Crop node, or a node with a label saying \"ignore bbox\", CROP THAT SHIZ!\n            if i.input(1).Class() != \"Crop\" and \"ignore bbox\" not in i.input(1).knob('label').value():\n\n                i.input(1).setSelected(True)\n\n                # If the fast option is selected, simply crop to format + overscan.\n                if speed == \"fast\":\n                    crop_node = nuke.createNode('Crop')\n                    crop_node.knob('label').setValue(\"AutoCrop (fast)\")\n\n                    # Add some overscan to the newly-created crops\n                    crop_node.knob('box').setValue(format_x, 0)\n                    crop_node.knob('box').setValue(format_y, 1)\n                    crop_node.knob('box').setValue(format_w, 2)\n                    crop_node.knob('box').setValue(format_h, 3)\n\n                # If the precise option is selected, run nukescripts.autocrop() and add overscan.\n                elif speed == \"precise\":\n                    nukescripts.autocrop()\n\n                    # Add some overscan to the newly-created crops\n                    for crop_node in nuke.allNodes('Crop'):\n                        if crop_node.knob('label').value() == \"AutoCrop\":\n                            crop_node.knob('box').setExpression('curve+'+str(format_x), 0)\n                            crop_node.knob('box').setExpression('curve+'+str(format_y), 1)\n                            crop_node.knob('box').setExpression('curve-'+str(format_x), 2)\n                            crop_node.knob('box').setExpression('curve-'+str(format_y), 3)\n\n                i.input(1).setSelected(False)\n\n                # Move the Merge node to be in line with the crop.\n                # nuke.autoplace(i)\n                # i.knob('ypos').setValue(i.input(1).knob('ypos').value())\n\n                print(i.name()+\"'s A pipe has an oversized bbox. Autocropping...\")" +STARTLINE}
}
